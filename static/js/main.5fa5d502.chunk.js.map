{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","flex","placeholder","className","About","Fragment","App","uuid","v4","filter","newTodo","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fa5d502.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport class TodoItem extends Component {\ngetStyle = () => {\n// ternary operator below. Could also be if statements\n  return {\n    background: '#DFFFD6',\n    padding: '10px',\n    borderBottom: '1px #ccc dotted',\n    textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n  }\n}\n\n// markComplete = (element) => {\n//   console.log(this.props)\n// }\n\n  render() {\n    const { id, title } = this.props.todo;\n    return (\n      // example of inline styling:\n      // <div style={{ backgroundColor: 'pink'}}>\n      // you could also create a variable and pass that in (with just one set of curly brackets)\n      // The following way passes in a method:\n      <div style={this.getStyle()}>\n        <p>\n        <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {' '}      \n        { title }\n        <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>X</button>\n        </p>\n      </div>\n    )\n  }\n}\n\n// PropTypes\nTodoItem.propTypes = {\n  todo: PropTypes.object.isRequired\n}\n\nconst btnStyle = {\n  background: 'rgb(207, 205, 204);',//'#FFD7D5', //'rgb(87, 130, 170)', //#ff0000\n  color: '#fff',\n  border: 'none',\n  padding: '5px 9px',\n  borderRadius: '50%',\n  cursor: 'pointer',\n  float: 'right'\n}\n\nexport default TodoItem\n","import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport PropTypes from 'prop-types';\n\nclass Todos extends Component {\n// markComplete = () => {\n//       console.log('hello')\n//     }\n\n  render() {\n    return this.props.todos.map(todo => \n    <TodoItem key={todo.id} todo={todo} \n    markComplete= {this.props.markComplete} delTodo={this.props.delTodo}/>);\n  }\n}\n\n// PropTypes\nTodos.propTypes = {\n  todos: PropTypes.array.isRequired\n}\n\nexport default Todos;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n  return (\n    <header style={headerStyle}>\n      <h1>ToDoList</h1>\n      <Link style={linkStyle} to=\"/React-TodoList/\">Home</Link> | <Link style={linkStyle} to=\"/React-TodoList/about\">About</Link>\n    </header>\n  )\n}\n\nconst headerStyle = {\n  background: '#B49FCC', //#333\n  color: '#fff', //#fff\n  textAlign: 'center',\n  padding: '10px'\n}\n\nconst linkStyle = {\n  color: '#fff',\n  textDecoration: 'none'\n}\n\nexport default Header;","import React, { Component } from \"react\";\n\nexport class AddTodo extends Component {\n  state = {\n    title: ''\n  }\n\nonSubmit = (e) => {\n  e.preventDefault();\n  this.props.addTodo(this.state.title);\n  this.setState({ title: \"\" });\n}\n\nonChange = (e) => this.setState({ [e.target.name]: e.target.value});\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} style={{ display: 'flex'}}>\n        <input \n        type=\"text\" \n        name=\"title\" \n        style={{ flex: '10', padding: '5px'}}\n        placeholder=\"Add task...\"\n        value={this.state.title}\n        onChange={this.onChange}\n        />\n        <input \n        type=\"submit\" \n        value=\"Submit\" \n        className=\"btn\" \n        style={{flex: '1'}}/>\n      </form>\n    );\n  }\n}\n\nexport default AddTodo;\n","import React from 'react'\n\nfunction About() {\n  return (\n    <React.Fragment>\n      <h1 >About</h1>\n      <p>This is the TodoList app v1.0.0. It is part of a React crash course.</p>\n    </React.Fragment>\n  )\n}\n\n// const pageStyle = {\n//   backgroundImage: \"public/images/leaves/leaves.png\"\n// }\n\nexport default About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Todos from './components/Todos';\nimport Header from './components/layout/header'\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport uuid from 'uuid';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: uuid.v4(),\n        title: 'Do the washing up',\n        completed: false\n      },\n       {\n        id: uuid.v4(),\n        title: 'Sweep the kitchen floor',\n        completed: false\n      },\n       {\n        id: uuid.v4(),\n        title: 'Check meter readings',\n        completed: false\n      },\n    ]\n  }\n\n// Toggle complete\nmarkComplete = (id) => {\n  this.setState({ todos: this.state.todos.map(todo => {\n    if(todo.id === id) {\n      todo.completed = !todo.completed\n    }\n    return todo;\n  })})\n}\n\n// Delete Todo\ndelTodo = (id) => {\n  this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)]})\n}\n\n// Add Todo\naddTodo = (title) => {\n  // let id = todos.length+1;\n  const newTodo = {\n    id: uuid.v4(),\n    title: title,\n    completed: false\n   }\n  this.setState({ todos: [...this.state.todos, newTodo]})\n}\n\nrender() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header />\n            <Route exact path=\"/React-TodoList/\" render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n            <Todos todos={this.state.todos} markComplete={this.markComplete} \n              delTodo={this.delTodo}/>\n          </React.Fragment>\n        )} />\n        <Route path=\"/React-TodoList/about\" component={About} />\n       \n      </div>\n    </div>\n    </Router>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}